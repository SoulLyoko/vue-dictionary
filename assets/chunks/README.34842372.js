import{_ as e,o as n,b as a,h as s}from"../app.7ecb5eec.js";const v='{"title":"Directory","description":"","frontmatter":{},"headers":[{"level":2,"title":"Development","slug":"development"},{"level":3,"title":"Install and run","slug":"install-and-run"},{"level":3,"title":"Other commands","slug":"other-commands"},{"level":3,"title":"Support Vue2 and Vue3","slug":"support-vue2-and-vue3"},{"level":2,"title":"Build","slug":"build"},{"level":2,"title":"Publish","slug":"publish"},{"level":2,"title":"Deploy docs","slug":"deploy-docs"}],"relativePath":"../README.md"}',t={},o=s(`<div align="center"><h3>VueDictionary</h3><span>A template for building Vue components library</span><br><a href="https://soullyoko.github.io/vue-dictionary/">Docs</a></div><h1 id="directory" tabindex="-1">Directory <a class="header-anchor" href="#directory" aria-hidden="true">#</a></h1><div class="language-bash"><pre><code>\u251C\u2500\u2500 .github         <span class="token comment"># github workflows</span>
\u251C\u2500\u2500 .husky          <span class="token comment"># git hooks</span>
\u251C\u2500\u2500 packages        <span class="token comment"># lib source</span>
\u251C\u2500\u2500 scripts         <span class="token comment"># command scripts</span>
\u251C\u2500\u2500 src             <span class="token comment"># dev source</span>
</code></pre></div><h1 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-hidden="true">#</a></h1><ul><li>Support Vue2 and Vue3 with <a href="https://github.com/vueuse/vue-demi" target="_blank" rel="noopener noreferrer">VueDemi</a></li><li>Develop and build with <a href="https://cn.vitejs.dev/" target="_blank" rel="noopener noreferrer">Vite</a></li><li>Unit Testing with <a href="https://cn.vitest.dev/" target="_blank" rel="noopener noreferrer">Vitest</a></li><li>Docs with <a href="https://vitejs.cn/vitepress/" target="_blank" rel="noopener noreferrer">VitePress</a></li><li>Auto CI, Deploy, Publish with GitHub Actions</li></ul><h1 id="try-it" tabindex="-1">Try it <a class="header-anchor" href="#try-it" aria-hidden="true">#</a></h1><ul><li>Use this template</li><li>Global rename <code>vue-dictionary</code> and <code>VueDictionary</code> to your own library name.</li><li>Generate your github personal access token on <a href="https://github.com/settings/tokens" target="_blank" rel="noopener noreferrer">https://github.com/settings/tokens</a> (skip if you already have)</li><li>Add your github personal access token named <code>ACCESS_TOKEN</code> (or any other name, it corresponds to <code>.github/workflows/deploy.yml#L21</code> to your repo <code>Setting&gt;Secrets&gt;Actions</code></li><li>Generate your npm access token (skip if you already have)</li><li>Add your npm access token named <code>NPM_ACCESS_TOKEN</code> (or any other name, it corresponds to <code>.github/workflows/publish.yml#L21</code> to your repo <code>Setting&gt;Secrets&gt;Actions</code></li></ul><h1 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-hidden="true">#</a></h1><h2 id="development" tabindex="-1">Development <a class="header-anchor" href="#development" aria-hidden="true">#</a></h2><h3 id="install-and-run" tabindex="-1">Install and run <a class="header-anchor" href="#install-and-run" aria-hidden="true">#</a></h3><div class="language-bash"><pre><code><span class="token function">yarn</span>
<span class="token function">yarn</span> dev
</code></pre></div><h3 id="other-commands" tabindex="-1">Other commands <a class="header-anchor" href="#other-commands" aria-hidden="true">#</a></h3><div class="language-bash"><pre><code><span class="token function">yarn</span> dev <span class="token comment"># dev on vue3</span>
<span class="token function">yarn</span> dev:2 <span class="token comment"># dev on vue2</span>
<span class="token function">yarn</span> docs:dev <span class="token comment"># dev docs</span>
<span class="token function">yarn</span> <span class="token builtin class-name">test</span> <span class="token comment"># test on vue3 in watch mode</span>
<span class="token function">yarn</span> test:2 <span class="token comment"># test on vue2 without watch</span>
<span class="token function">yarn</span> test:3 <span class="token comment"># test on vue3 without watch</span>
<span class="token function">yarn</span> test:all <span class="token comment"># test both of vue2 and vue3 without watch</span>
<span class="token function">yarn</span> test:coverage <span class="token comment"># use c8 for coverage</span>
<span class="token function">yarn</span> switch:2 <span class="token comment"># switch packages and vue-demi to vue2</span>
<span class="token function">yarn</span> switch:3 <span class="token comment"># switch packages and vue-demi to vue3</span>
<span class="token function">yarn</span> release <span class="token comment"># release by choicing a version</span>
<span class="token function">yarn</span> typecheck <span class="token comment"># run vue-tsc with noEmit</span>
<span class="token function">yarn</span> changelog <span class="token comment"># generate changelog</span>
<span class="token function">yarn</span> ci <span class="token comment"># ci</span>
</code></pre></div><h3 id="support-vue2-and-vue3" tabindex="-1">Support Vue2 and Vue3 <a class="header-anchor" href="#support-vue2-and-vue3" aria-hidden="true">#</a></h3><p>Examples: see <code>packages/components</code></p><p>Do not use SFC(.vue) files, just use the function <code>h()</code> (encapsulated by h-demi) in <code>.ts</code> files, no jsx of course.</p><p>Don&#39;t forget to add <code>value,modelValue</code> to props options and add <code>input,update:modelValue</code> to emits options at the same time</p><h2 id="build" tabindex="-1">Build <a class="header-anchor" href="#build" aria-hidden="true">#</a></h2><div class="language-bash"><pre><code><span class="token function">yarn</span> build
</code></pre></div><h2 id="publish" tabindex="-1">Publish <a class="header-anchor" href="#publish" aria-hidden="true">#</a></h2><p>Automatic publish to npm using <code>.github/workflows/publish.yml</code>, after running <code>yarn release</code> and push to origin.</p><p>If you want to publish manually, remove <code>publish.yml</code> and run</p><div class="language-bash"><pre><code><span class="token function">yarn</span> release
<span class="token function">yarn</span> build
<span class="token function">npm</span> publish
</code></pre></div><h2 id="deploy-docs" tabindex="-1">Deploy docs <a class="header-anchor" href="#deploy-docs" aria-hidden="true">#</a></h2><p>Automatic deployment to gh-pages using <code>.github/workflows/deploy.yml</code>.</p><p>If you want to deploy manually, remove <code>deploy.yml</code> and run</p><div class="language-bash"><pre><code><span class="token function">yarn</span> docs:build <span class="token comment"># packages/.vitepress/dist</span>
</code></pre></div>`,27),c=[o];function i(r,l,d,p,u,h){return n(),a("div",null,c)}var y=e(t,[["render",i]]);export{v as __pageData,y as default};
